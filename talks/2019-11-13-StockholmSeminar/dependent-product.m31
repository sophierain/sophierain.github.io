rule Π (A type) ({x : A} B type) type

let cong_Π = derive 
    (A type) 
    (A' type) 
    ({_:A} B type)
    ({_:A'} B' type) 
    (A ≡ A' as ζ)
    ({x : A} ((B x) ≡ (B'(convert x ζ) : A) as ξ))
    -> 
    ζ

rule X type;;
rule X' type;;
rule Y (_ : X) type
rule Y' (_ : X') type
rule ζ : X ≡ X';;
rule ξ (x : X) : (Y x) ≡ Y' (convert x ζ);;

let cong_Π_X_X' = congruence 
    (Π X ({x : X} Y x)) 
    (Π X' ({x : X'} Y' x))
    ζ
    ({x} ξ x)


rule λ (A type) ({x : A} B type) ({x : A} e : B{x}) : Π A B

rule app (A type) ({x : A} B type) (s : Π A B) (a : A)
  : B{a}

rule Π_β (A type) ({x : A} B type) ({x : A} s : B{x}) (a : A)
  : app A B (λ A B s) a == s{a} : B{a}

rule Π_η (A type) ({x : A} B type) (s : Π A B)
  : s == λ A B ({x:A} app A B s x) : Π A B