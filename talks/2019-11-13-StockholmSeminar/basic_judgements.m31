(*judgements*)
rule ℕ type;;
rule zero : ℕ;;
rule succ (n : ℕ) : ℕ;;
rule (+) (n : ℕ) (m : ℕ) : ℕ;;

rule eq_type_refl (A type) : A ≡ A;;
let eq_ℕ = eq_type_refl ℕ;;
rule equality_succ (n : ℕ) 
                  (m : ℕ) (n == m : ℕ as _) : 
                   succ n == succ m : ℕ;;

rule eq_zero : zero == zero : ℕ;;
equality_succ zero zero eq_zero;;


(*abstractions*)
let abstr_succ = {x : ℕ} succ x;;
let one = abstr_succ{zero};;
let x = fresh x : ℕ;;
let abstr_succ_x = abstr_succ{x};;
let abstr_plus_x = {y : ℕ} (+) x y;;
let abstr_plus = abstract x abstr_plus_x;;



(* Abstraction in the rules *)
rule ℕ_ind
  ({x : ℕ} C type)
  (base : C{zero})
  ({n : ℕ} {c_n : C{n}} step : C{succ n})
  (k : ℕ)
  : C{k}

  rule ℕ_β_zero
  ({x : ℕ} C type)
  (base : C{zero})
  ({n : ℕ} {c_n : C{n}} step : C{succ n})
  : ℕ_ind C base step zero == base : C{zero}

rule ℕ_β_succ
  ({x : ℕ} C type)
  (base : C{zero})
  ({n : ℕ} {c_n : C{n}} step : C{succ n})
  (k : ℕ)
  : ℕ_ind C base step (succ k) == step { k, ℕ_ind C base step k } : C { succ k }

(* Derived rules *)

let plus3 =
  derive (n : ℕ) -> succ (succ (succ n)) ;;

(* rule ℕ_rec 
  (C type)
  (base_rec : C)
  ({n : ℕ} {c_n : C} step_rec : C)
  (k : ℕ)
  : C *)

let ℕ_rec = derive 
  (C type) 
  (base_rec : C)
  ({n : ℕ} {c_n : C} step_rec : C)
  (k : ℕ)
  -> 
  ℕ_ind ({x : ℕ} C) (base_rec) step_rec k;;

  let s = ℕ_rec ℕ zero ({n : ℕ} {n : ℕ} succ n) zero;;
  

